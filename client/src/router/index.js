/**
 * @file router/index.js
 * @description G≈Ç√≥wny plik konfiguracyjny dla Vue Router.
 * Definiuje wszystkie ≈õcie≈ºki (trasy) w aplikacji, w≈ÇƒÖcza leniwe ≈Çadowanie (lazy loading)
 * dla widok√≥w oraz implementuje globalnƒÖ ochronƒô ≈õcie≈ºek wymagajƒÖcych uwierzytelnienia.
 */

// ===================================================================================
// üìú IMPORTS
// ===================================================================================

import { createRouter, createWebHistory } from 'vue-router';
import { isAuthenticated } from '../auth/auth.js';

// ===================================================================================
// üó∫Ô∏è DEFINICJE ≈öCIE≈ªEK (ROUTES)
// ===================================================================================

/**
 * Tablica obiekt√≥w definiujƒÖcych ka≈ºdƒÖ dostƒôpnƒÖ ≈õcie≈ºkƒô w aplikacji.
 *
 * U≈ºycie `component: () => import(...)` to tzw. "lazy loading" (leniwe ≈Çadowanie).
 * Oznacza to, ≈ºe kod dla danego widoku zostanie pobrany przez przeglƒÖdarkƒô
 * dopiero wtedy, gdy u≈ºytkownik wejdzie na tƒô konkretnƒÖ podstronƒô,
 * co przyspiesza poczƒÖtkowe ≈Çadowanie aplikacji.
 *
 * Pole `meta: { requiresAuth: true }` to niestandardowe dane, kt√≥re pozwalajƒÖ nam
 * oznaczyƒá ≈õcie≈ºki wymagajƒÖce zalogowania.
 */
const routes = [
  {
    path: '/',
    name: 'dashboard',
    component: () => import('../views/DashboardView.vue'),
    meta: { requiresAuth: true },
  },
  {
    path: '/zlecenia',
    name: 'jobs',
    component: () => import('../views/JobsView.vue'),
    meta: { requiresAuth: true },
  },
  {
    path: '/klienci',
    name: 'clients',
    component: () => import('../views/ClientsView.vue'),
    meta: { requiresAuth: true },
  },
  {
    path: '/magazyn',
    name: 'inventory',
    component: () => import('../views/InventoryView.vue'),
    meta: { requiresAuth: true },
  },
  {
    path: '/oferty',
    name: 'offers',
    component: () => import('../views/OffersView.vue'),
    meta: { requiresAuth: true },
  },
  {
    path: '/login',
    name: 'login',
    component: () => import('../views/LoginView.vue'),
    // Ta ≈õcie≈ºka nie wymaga autoryzacji
  },
];

// ===================================================================================
// üöÄ TWORZENIE INSTANCJI ROUTERA
// ===================================================================================

const router = createRouter({
  // U≈ºywa `createWebHistory` dla "czystych" adres√≥w URL bez hasha (#).
  history: createWebHistory(import.meta.env.BASE_URL),
  routes: routes,
});

// ===================================================================================
// üõ°Ô∏è GLOBALNA OCHRONA ≈öCIE≈ªEK (NAVIGATION GUARD)
// ===================================================================================

/**
 * Ta funkcja jest wywo≈Çywana przed ka≈ºdƒÖ pr√≥bƒÖ zmiany ≈õcie≈ºki w aplikacji.
 * @param {object} to - Obiekt reprezentujƒÖcy ≈õcie≈ºkƒô, do kt√≥rej nawigujemy.
 * @param {object} from - Obiekt reprezentujƒÖcy ≈õcie≈ºkƒô, z kt√≥rej przychodzimy.
 * @param {function} next - Funkcja, kt√≥rƒÖ nale≈ºy wywo≈Çaƒá, aby kontynuowaƒá lub przekierowaƒá nawigacjƒô.
 */
router.beforeEach((to, from, next) => {
  // Sprawdzamy, czy ≈õcie≈ºka DOCELOWA wymaga uwierzytelnienia ORAZ czy u≈ºytkownik NIE JEST zalogowany.
  if (to.meta.requiresAuth && !isAuthenticated.value) {
    // Je≈õli tak, przekierowujemy u≈ºytkownika na stronƒô logowania.
    next({ name: 'login' });
  } else {
    // W przeciwnym wypadku pozwalamy na kontynuowanie nawigacji.
    next();
  }
});

// ===================================================================================
//  EXPORT
// ===================================================================================

export default router;
